import { fetchCrypto } from './cryptoAPI';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface CryptoState {
  currentSort: string
  list: Crypto[]
  searchResult: Crypto[]
  status: 'idle' | 'loading' | 'failed';
}

// export interface Crypto {
//   id: string
//   image: string
//   name: string
//   symbol: string
//   price: number
//   pricechange: number
// }
export interface Crypto {
  id: string
  image: string
  name: string
  symbol: string
  market_cap: string
  current_price: number
  market_cap_rank: number
  price_change_percentage_24h: number
}


const initialState: CryptoState = {
  currentSort: '',
  list: [],
  searchResult: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getData = createAsyncThunk(
  'crypto/fetchCrypto',
  async () => {
    const response = await fetchCrypto();
    const result = await response.json()
    // The value we return becomes the `fulfilled` action payload
    return result
  }
);

export const cryptoSlice = createSlice({
  name: 'crypto',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    filter: (state, action) => {
      state.searchResult = state.list.filter((item) => item.name.toLowerCase().trim().includes(action.payload.toLowerCase().trim())) || state.list
    },
    sort: (state, action) => {
      switch(action.payload) {
        case '#':
          if (state.currentSort !== action.payload) {
            state.currentSort = action.payload
            state.searchResult = state.searchResult.sort((a, b) => b.market_cap_rank - a.market_cap_rank)
          }
          else {
            state.currentSort = ''
            state.searchResult = state.searchResult.sort((a, b) => a.market_cap_rank - b.market_cap_rank)
          }
          break
        case 'Name':
          if (state.currentSort !== action.payload) {
            state.currentSort = action.payload
            state.searchResult = state.searchResult.sort((a, b) => b.name.localeCompare(a.name))
          }
          else {
            state.currentSort = ''
            state.searchResult = state.searchResult.sort((a, b) => a.name.localeCompare(b.name))
          }
          break
        case 'Price':
          if (state.currentSort !== action.payload) {
            state.currentSort = action.payload
            state.searchResult = state.searchResult.sort((a, b) => b.current_price - a.current_price)
          }
          else {
            state.currentSort = ''
            state.searchResult = state.searchResult.sort((a, b) => a.current_price - b.current_price)
          }
          break
        case '24h %':
          if (state.currentSort !== action.payload) {
            state.currentSort = action.payload
            state.searchResult = state.searchResult.sort((a, b) => b.price_change_percentage_24h - a.price_change_percentage_24h)
          }
          else {
            state.currentSort = ''
            state.searchResult = state.searchResult.sort((a, b) => a.price_change_percentage_24h - b.price_change_percentage_24h)
          }
          break
        case 'Market Cap':
          if (state.currentSort !== action.payload) {
            state.currentSort = action.payload
            state.searchResult = state.searchResult.sort((a, b) => b.market_cap_rank - a.market_cap_rank)
          }
          else {
            state.currentSort = ''
            state.searchResult = state.searchResult.sort((a, b) => a.market_cap_rank - b.market_cap_rank)
          }
      }
    }
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.list = action.payload
        state.searchResult = action.payload
      })
      .addCase(getData.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { filter, sort } = cryptoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectList = (state: RootState) => state.crypto.list;
export const selectSearchResult = (state: RootState) => state.crypto.searchResult;
export const selectSort = (state: RootState) => state.crypto.currentSort;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (dispatch, getState) => {
    // const currentValue = selectList(getState());
    // if (currentValue % 2 === 1) {
      // dispatch(incrementByAmount(amount));
    // }
  };

export default cryptoSlice.reducer;